# -*- coding: utf-8 -*-
"""first_jupyter_notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QSHG2m8z6G8imJSfgtj2SDNZ0ZBnRQ40
"""

# Header

2+2

"""# Google Collab
## THis is my first collab .ipynb file. This is really running in jupter notebook.

+this is a markdown
"""

2*2
4+4 ## here only ssecond line was run hence we need print statement.

print ( 2 + 3)
print ( 2 * 10)

print('Hello', 2 + 2 ,  4*5,  'python')

print('Hello', 2 + 2 ,  4*5,  'python', sep = '') #here sep wont put space between the words; sep can be used to introduce a separator between print statements.

print('hello' + 'world')
print('hello ' + ' world') #print('hello, +5) - cant be added as strings can not be added to number. Later in future section, we will learn how to achieve it.

price = 900
# Re-assign the built in print functionprint = __builtins__.print
print('the price of the mobile is $', price,sep='')
print('the price of the mobile is', price, 'dollar')
is_billed = False
print(is_billed)

"""# Variable Type

"""

type(price)

type(is_billed)

bill = price * 2
print(bill)

print(bill/2)
print(bill//2) #// forces a sign to be an int instead of float

a = 30
b = 8
c = a / b
print(c)
print(type(c))

a = 'rakesh'
type(a)
print(type(a))
print('hey rakesh this is the type ->', type(a))

"""#Type conversion in variable"""

price = 1200
discount = price * 0.045
sell = price - discount

print('the sold price is ' + str(sell), 'dollars') # here teh discounted prize is not convered to string rather its just formatted.
type(str(price))

'mercedes' + ' ' + str(sell) + 'dollar'

a = 10
c = int(a)
print(float(c))

"""# Data Structures

## List
"""

#Create a List   len(), pop(), append()

brands = ['Apple',  'Microsoft', 'Amazon'] # Assignment is different to c#
print(type(brands))
print(brands)
print(brands[2])
print('length -', len(brands)) # in c# we directly access from the array object.
print(max(brands))

prices = [10,100,1,600]
print(prices)

print(min(prices))
print(max(prices))

print(prices[-1:4])
print(prices[0:3]) # it stops at the index before 4; left is inclusive, right is exlusive
print(prices[-1]) # negative integer counts from the last
print(prices[-5:-1])

brands.pop()
brands

brands.append('salesforce')
brands

x = [10, "Range", "Great", -54, 11, 12]
print(x[-5:-1])
print(x[-1:-3:-1]) # use 3rd entry which step, which is any value; that is how the execution will proceed. Default is +1

# prompt: how to add file

# Upload a file from your local machine
from google.colab import files
uploaded = files.upload()

"""## Tuple"""

brands.append('google')
brands

storage = (100,200,400,150)  # Tupe is immutable unlike list. I can not change individual element.
print(storage)
print(type(storage))

len(storage)
max(storage)
storage[3]

"""

```
# This is formatted as code
```

## Dictionary"""

attributes = {'Brand' : 'apple', 'price' : 129}
print(attributes)
print(type(attributes))

print(attributes['price'])

attributes['deliverytime'] = 10

attributes

attributes[10] = 'deliverytime'

attributes

attributes['brands'] = brands
attributes['storages'] = storage

attributes

print('the keys if the dictionary are: \n', attributes.keys())

print('the keys if the dictionary are: \n', attributes.values())

# print(attributes.popitem())
# print(attributes.pop(10))
attributes.update({'Brand' : 'rakesh p'})
attributes.update({'Sport' : 'Cricket'})
attributes.update({'travel' : ["USA", "CANADA", "UK"]})

attributes

"""# Conditional Statements

"""

budget = int(input('Enter your budget'))
price = 1000

if price < budget:
  print('you can buy an i phone')
  print('you can buy an ipad')
elif price == budget:
  print('bingo!')
else:
  print('you can not buy an i phone')

"""# Looping Statements"""

print(range(6))

print(list(range(6)))

print(list(range(2,6)))

print(list(range(2,10,2)))

list(range(-100,-10, 10)) # start, end, step

for item in list(range(2,10,2)):
  print(item)

for item in list(range(1,10)):
  if (item % 2 == 0): # Parentheses  can be used only in conditional block; unlike c# for loop and while loop does not require Parentheses
    square = item ** 2
    print("square of the number is " + str(item ** 2)) # square all even numbers
    print(f"this is formatted parentheses test; result is {square}")
  else:
    cube = item ** 3
    print("cube of the number is " + str(item ** 3)) # cube of all odd numbers
    print(f"this is formatted parentheses test; result is {cube}")

price = 100

while(price < 1000):
  print("loop running")
  price = price * 2
  print(price)

pricelist = [10,20,50,90,100,1000]

discounted_price = []

for price in pricelist:
  if price < 100:
    discounted_price.append(price * 0.8)
    print(discounted_price)
  else:
    discounted_price.append(price * 0.5)
    discounted_price.extend([10,12,18])
    print(discounted_price)

#List comprehension

pricelist = [10,20,50,90,100,1000]

discounted_price = [x - x*0.05 if x > 10 else x + 5 for x in pricelist ]

print(discounted_price)



"""# Functions

"""

def myfirst_python_function():
  """
   function definition
  """
  print('this is my first python function')

myfirst_python_function()

def myfirst_python_function(params):
  """
   function definition
  """
  print('this is my second python function',params[-1])

myfirst_python_function([10,100,200])

def myfirst_python_function(brand, name, age = 60 ):
  """
   function definition
  """
  print('this is my second python function',brand, name, age, sep = ' | ')
  return brand, name > 'A' , age + 5


list = myfirst_python_function('Apple', 'steve jobs')

"""## Lamda function - for short anonymous functions without return statement"""

discounted_price = lambda price: price * 0.8 if price > 10 else price * 2 if price > 5 else price + 5



def test_funs(string, times):
 print(string.upper()*times)


test_funs('rakesh', 5)

def find_first_tenevennumbers():
  count = 0
  for number in range(1,100):
    if (number % 2 == 0 and count < 10):
      print(number)
      count = count + 1

find_first_tenevennumbers()

